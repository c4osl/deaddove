diff --git a/js/deaddove-content-warning.js b/js/deaddove-content-warning.js
index f68132c..1094cbc 100644
--- a/js/deaddove-content-warning.js
+++ b/js/deaddove-content-warning.js
@@ -305,80 +305,84 @@ This is used for content warning widget in Post
     .catch(function (error) {
       console.error("Error occurred:", error);
     });
-  let observer = new MutationObserver(function (mutations) {
-    mutations.forEach(function (mutation) {
-      // if (ajaxResponse !== null) {
-      //   ajaxResponse.forEach(function (activity) {
-      //     appendContentWarningToParent(activity);
-      //   });
-      // }
-      let currentUrl = window.location.href;
-      let baseUrl = window.location.origin;
+    let currentUrl = window.location.href;
+  const urlParts = currentUrl.split("/");
 
-      var parentActivityIds = [];
+  console.log("urlParts", urlParts.includes("community"));
+  if (!(urlParts.includes("forums") && urlParts.includes("discussion")) && !(urlParts.includes("community"))) {
+    console.log("inside mutation observer");
+    let observer = new MutationObserver(function (mutations) {
+      mutations.forEach(function (mutation) {
+        // if (ajaxResponse !== null) {
+        //   ajaxResponse.forEach(function (activity) {
+        //     appendContentWarningToParent(activity);
+        //   });
+        // }
+        let currentUrl = window.location.href;
+        let baseUrl = window.location.origin;
 
-      if (allContentWarning.length !== 0) {
-        allContentWarning.forEach(function (activity) {
-          appendContentWarningToParent(activity);
-        });
-      }
-      const urlParts = currentUrl.split("/");
-      if (urlParts.includes("forums") && urlParts.includes("discussion")) {
-        // console.log("inside sjdfl", currentUrl);
+        var parentActivityIds = [];
 
-      } else {
-        if (jQuery(".media-list").length) {
-          jQuery(".media-list")
-            .find("a[data-parent-activity-id]")
-            .each(function () {
-              var parentActivityId = jQuery(this).attr(
-                "data-parent-activity-id"
-              );
-              if (processedActivityIds.has(parentActivityId)) {
-                return;
-              }
-              parentActivityIds.push(parentActivityId);
-            });
-        } else if (jQuery(".activity-list").length) {
-          // jQuery('.activity-list').find('a[data-parent-activity-id]').each(function() {
-          //   var parentActivityId = jQuery(this).attr('data-parent-activity-id');
-          //   if (processedActivityIds.has(parentActivityId)) {
-          //     // console.log("Processitem has item", parentActivityId)
-          //     return;
-          //   }
-          //   parentActivityIds.push(parentActivityId);
-          // });
-          jQuery(".activity-list")
-            .find("li[data-bp-activity-id]")
-            .each(function () {
-              var parentActivityId = jQuery(this).attr("data-bp-activity-id");
-              if (processedActivityIds.has(parentActivityId)) {
-                // console.log("Processitem has item", parentActivityId)
-                return;
-              }
-              parentActivityIds.push(parentActivityId);
-            });
+        if (allContentWarning.length !== 0) {
+          allContentWarning.forEach(function (activity) {
+            appendContentWarningToParent(activity);
+          });
         }
-        parentActivityIds = [...new Set(parentActivityIds)];
-        if (parentActivityIds.length === 0) {
-          // resolve([]);
+        const urlParts = currentUrl.split("/");
+      
+          if (jQuery(".media-list").length) {
+            jQuery(".media-list")
+              .find("a[data-parent-activity-id]")
+              .each(function () {
+                var parentActivityId = jQuery(this).attr(
+                  "data-parent-activity-id"
+                );
+                if (processedActivityIds.has(parentActivityId)) {
+                  return;
+                }
+                parentActivityIds.push(parentActivityId);
+              });
+          } else if (jQuery(".activity-list").length) {
+            // jQuery('.activity-list').find('a[data-parent-activity-id]').each(function() {
+            //   var parentActivityId = jQuery(this).attr('data-parent-activity-id');
+            //   if (processedActivityIds.has(parentActivityId)) {
+            //     // console.log("Processitem has item", parentActivityId)
+            //     return;
+            //   }
+            //   parentActivityIds.push(parentActivityId);
+            // });
+            jQuery(".activity-list")
+              .find("li[data-bp-activity-id]")
+              .each(function () {
+                var parentActivityId = jQuery(this).attr("data-bp-activity-id");
+                if (processedActivityIds.has(parentActivityId)) {
+                  // console.log("Processitem has item", parentActivityId)
+                  return;
+                }
+                parentActivityIds.push(parentActivityId);
+              });
+          }
+          parentActivityIds = [...new Set(parentActivityIds)];
+          if (parentActivityIds.length === 0) {
+            // resolve([]);
 
-          return parentActivityIds;
-        }
-      }
-      getContentWarningData(parentActivityIds)
-        .then(function (activities) {
-          ajaxResponse = activities;
-          activities.forEach(function (activity) {
-            appendContentWarningToParent(activity);
+            return parentActivityIds;
+          }
+        
+        getContentWarningData(parentActivityIds)
+          .then(function (activities) {
+            ajaxResponse = activities;
+            activities.forEach(function (activity) {
+              appendContentWarningToParent(activity);
+            });
+          })
+          .catch(function (error) {
+            console.error("Error occurred:", error);
           });
-        })
-        .catch(function (error) {
-          console.error("Error occurred:", error);
-        });
+      });
     });
-  });
-  observer.observe(document.body, { childList: true, subtree: true });
+    observer.observe(document.body, { childList: true, subtree: true });
+  }
   function appendContentWarningToParent(activity) {
     console.log("checking activity id ", activity.activity_id);
     var parentElements = jQuery(